<% provide(:title, "Log in") %>
<% provide(:header, "test") %>

<section>
  <div class="row min-width">
    <div class="col-xs-12 col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4 ">
      <%= form_for(:session, url: login_path) do |f| %>
        <span class="input input--yoshiko">
          <%= f.text_field :login,
                           :id => 'input-10',
                           :class => 'input__field input__field--yoshiko' %>
          <label class="input__label input__label--yoshiko" for="input-10">
            <span class="input__label-content input__label-content--yoshiko" data-content="Login">Login</span>
          </label>
        </span>
        <span class="input input--yoshiko">
          <%= f.password_field :password,
                               :id => 'input-10',
                               :class => 'input__field input__field--yoshiko' %>
          <label class="input__label input__label--yoshiko" for="input-10">
            <span class="input__label-content input__label-content--yoshiko" data-content="Password">Password</span>
          </label>
        </span>
        <div class="row min-width">
          <div class="col-xs-12 col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3">
            <%= f.submit "Entrar", :id => "my-button", class: "btn btn-primary" %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</section>
<script>
  (function() {
    // trim polyfill : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
    if (!String.prototype.trim) {
      (function() {
        // Make sure we trim BOM and NBSP
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
          return this.replace(rtrim, '');
        };
      })();
    }

    [].slice.call( document.querySelectorAll( 'input.input__field' ) ).forEach( function( inputEl ) {
      // in case the input is already filled..
      if( inputEl.value.trim() !== '' ) {
        classie.add( inputEl.parentNode, 'input--filled' );
      }

      // events:
      inputEl.addEventListener( 'focus', onInputFocus );
      inputEl.addEventListener( 'blur', onInputBlur );
    } );

    function onInputFocus( ev ) {
      classie.add( ev.target.parentNode, 'input--filled' );
    }

    function onInputBlur( ev ) {
      if( ev.target.value.trim() === '' ) {
        classie.remove( ev.target.parentNode, 'input--filled' );
      }
    }
  })();
</script>